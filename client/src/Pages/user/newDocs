  const { mutate } = useMutation({
    mutationFn: (id) => makeRequest(`/product/like/${id}`, "PUT", { userId }),
    onMutate: async (id) => {
      await queryClient.cancelQueries(["products"]);
      const previousProducts = queryClient.getQueryData(["products"]);

      queryClient.setQueryData(["products"], (old) =>{
        return   old.map((item) =>
            item._id === id
              ? {
                  ...item,
                  usersLiked: item.usersLiked.includes(userId)
                    ? item.usersLiked.filter((user) => user !== userId)
                    : [...item.usersLiked, userId],
                  likes: item.usersLiked.includes(userId)
                    ? item.likes - 1
                    : item.likes + 1
                }
              : item
          )
      }
      
      );
 
      return { previousProducts };
    },
    onError: (error, id, context) => {
      toast.error("Failed to like the product.");
      queryClient.setQueryData(["products"], context.previousProducts);
    },
    onSettled: () => {
      queryClient.invalidateQueries(["products"]);
    }
  });